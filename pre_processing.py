import os
import cv2 as cv
import numpy as np
import pandas as pd
from mtcnn.mtcnn import MTCNN
from keras_facenet import FaceNet

# ·∫®n c·∫£nh b√°o TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Kh·ªüi t·∫°o model
detector = MTCNN()
facenet = FaceNet()

# Danh s√°ch ƒë·ªÉ l∆∞u d·ªØ li·ªáu
data = []

folder_path = "dataset"

for root, dirs, files in os.walk(folder_path):
    label = os.path.basename(root)  # L·∫•y t√™n th∆∞ m·ª•c l√†m nh√£n
    print(f"üìÇ ƒê·ªçc th∆∞ m·ª•c: {label}")

    for file in files:
        file_path = os.path.join(root, file)
        print(f"  üìÑ X·ª≠ l√Ω: {file_path}")

        # ƒê·ªçc ·∫£nh
        img_bgr = cv.imread(file_path)
        if img_bgr is None:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc ·∫£nh: {file_path}")
            continue

        img_rgb = cv.cvtColor(img_bgr, cv.COLOR_BGR2RGB)
        results = detector.detect_faces(img_rgb)

        if results:
            x, y, w, h = results[0]['box']

            # C·∫Øt ·∫£nh khu√¥n m·∫∑t
            face_img = img_rgb[y:y+h, x:x+w]
            if face_img.shape[0] > 0 and face_img.shape[1] > 0:
                face_img = cv.resize(face_img, (160, 160))
                face_img = np.expand_dims(face_img, axis=0)

                # Tr√≠ch xu·∫•t embedding
                ypred = facenet.embeddings(face_img)

                # L∆∞u v√†o danh s√°ch v·ªõi nh√£n (t√™n th∆∞ m·ª•c)
                data.append([label] + ypred.flatten().tolist())

# Chuy·ªÉn danh s√°ch th√†nh DataFrame
df = pd.DataFrame(data)

# ƒê·∫∑t t√™n c·ªôt
df.columns = ["label"] + [f"dim_{i}" for i in range(df.shape[1] - 1)]

# L∆∞u v√†o file CSV
df.to_csv("face_embeddings.csv", index=False)

print("‚úÖ ƒê√£ l∆∞u face_embeddings.csv th√†nh c√¥ng!")


import faiss

# ==== B∆∞·ªõc 1: Chu·∫©n b·ªã d·ªØ li·ªáu (vector t·ª´ FaceNet) ====
face_db = {
    "Alice": [np.random.rand(512) for _ in range(5)],
    "Bob": [np.random.rand(512) for _ in range(5)],
    "Charlie": [np.random.rand(512) for _ in range(5)],
}

# T·∫°o danh s√°ch nh√£n (labels) v√† ma tr·∫≠n vector
labels = []
vectors = []
index_to_name = {}  # √Ånh x·∫° ch·ªâ s·ªë FAISS -> t√™n ng∆∞·ªùi

i = 0
for name, vecs in face_db.items():
    for v in vecs:
        labels.append(i)
        vectors.append(v)
        index_to_name[i] = name
        i += 1

# Chuy·ªÉn d·ªØ li·ªáu th√†nh numpy array
vectors = np.array(vectors).astype('float32')  # FAISS y√™u c·∫ßu float32

# ==== B∆∞·ªõc 2: Kh·ªüi t·∫°o FAISS Index ====
dimension = 512  # Vector FaceNet c√≥ 512 chi·ªÅu
index = faiss.IndexFlatL2(dimension)  # S·ª≠ d·ª•ng L2 (Euclidean Distance)
index.add(vectors)  # Th√™m t·∫•t c·∫£ vector v√†o FAISS

# ==== B∆∞·ªõc 3: T√¨m ki·∫øm vector m·ªõi ====
def recognize_face_faiss(face_vector, top_k=1, threshold=1.0):
    """
    T√¨m ng∆∞·ªùi g·∫ßn nh·∫•t v·ªõi face_vector b·∫±ng FAISS.
    N·∫øu kho·∫£ng c√°ch > threshold, tr·∫£ v·ªÅ 'Unknown'.
    """
    face_vector = np.array(face_vector).astype('float32').reshape(1, -1)  # ƒê·ªãnh d·∫°ng l·∫°i vector
    D, I = index.search(face_vector, top_k)  # D: kho·∫£ng c√°ch, I: ch·ªâ s·ªë

    best_index = I[0][0]  # L·∫•y ch·ªâ s·ªë g·∫ßn nh·∫•t
    best_distance = D[0][0]

    if best_distance > threshold:  # N·∫øu kho·∫£ng c√°ch qu√° xa, coi l√† "Unknown"
        return "Unknown", best_distance

    return index_to_name[best_index], best_distance

# ==== B∆∞·ªõc 4: Test nh·∫≠n di·ªán ====
new_face = np.random.rand(512)  # Vector t·ª´ FaceNet
predicted_name, confidence = recognize_face_faiss(new_face)

print(f"Predicted: {predicted_name} (Distance: {confidence:.2f})")
